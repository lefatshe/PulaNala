rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return isAuthenticated() && 'admin' in request.auth.token && request.auth.token.admin == true
    }

    function isAuthenticated() {
      return request.auth.id.uid != null;
    }

    function isNonEmptyString(fieldName) {
      request.resource.data[fieldName] is string && request..resource.data[fieldName].size() > 0;
    }

    function isKnownUser() {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function isValidCourse() {
      request.resource.data.seqNo is number && request.resource.data.seqNo >= 0 && isNonEmptyString("url")
    }

    match /rooms/{roomId} {
      allow read: if isKnownUser();
      
      allow create, update: if isValidCourse() && isAdmin();
      allow delete: if isAdmin();

      match /rooms/{roomId} {
        allow read: if isKnownUser()
      }

    }

    match /{path=**}/bookings/{bookingId} {
    
      match /rooms/{roomId} {
        allow read: if isKnownUser()
      }

    }

    
    
  }

}